import os
import requests, math
import fake_useragent
import importlib
import pkgutil
from urllib.parse import urlparse
from pathlib import Path

def _load_proxies() -> list[str]:
    proxy_file = Path("proxies.txt")
    if proxy_file.exists():
        with proxy_file.open("r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    else:
        return []

def _parse_proxy(line: str) -> dict[str, str]:
    host, port, protocol, *rest = line.split(":")
    creds = f"{rest[0]}:{rest[1]}@" if len(rest) == 2 and rest[0] else ""
    url = f"{protocol}://{creds}{host}:{port}"
    return {"http": url, "https": url}

_DETECTORS = []
cms_folder = os.path.join(os.path.dirname(__file__))
for _, mod_name, is_pkg in pkgutil.iter_modules([cms_folder]):
    if not is_pkg:
        try:
            mod = importlib.import_module(f"{__name__}.{mod_name}")
            if hasattr(mod, "detect"):
                _DETECTORS.append(mod.detect)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {mod_name}: {e}")

def _detect(domain: str, session: requests.Session) -> dict:
    results = []
    for d in _DETECTORS:
        try:
            res = d(domain, session)
            if res:
                print(f"\nüìò CMS: {res.get('cms')}")
                print(f"üî¢ –í–µ—Ä—Å–∏—è: {res.get('version') or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
                match res.get("vulnerable"):
                    case True:
                        print("üö® –£—è–∑–≤–∏–º–æ—Å—Ç—å: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                    case False:
                        print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                    case _:
                        print("‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç—å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                if "details" in res:
                    print(f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {res['details']}")
                results.append(res)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ {d.__name__}: {e}")
    if results:
        return results
    print("‚ùå CMS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
    return {"cms": "Unknown"}

def send_telegram_message(token: str, chat_id: int, text: str):
    max_len = 1024
    chunks = [text[i:i+max_len] for i in range(0, len(text), max_len)]
    for chunk in chunks:
        resp = requests.post(
            f"https://api.telegram.org/bot{token}/sendMessage",
            data={"chat_id": chat_id, "text": chunk}
        )
        if not resp.ok:
            print(f"Telegram API error: {resp.status_code}, {resp.text}")

def run(domain: str, tg_token: str, tg_chat: int) -> None:
    if not domain.startswith(("http://", "https://")):
        domain = "https://" + domain

    ua = fake_useragent.UserAgent().random

    for line in _load_proxies():
        try:
            proxies = _parse_proxy(line)
        except ValueError:
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {line}")
            continue

        print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {proxies['http']}")

        with requests.Session() as s:
            s.proxies = proxies
            s.headers.update({"User-Agent": ua})
            try:
                s.get(domain, timeout=10).raise_for_status()
                print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {proxies['http']}")
                result = _detect(domain, s)
                if tg_token and tg_chat and result:
                    try:
                        msg = f"üì° CMS-—Å–∫–∞–Ω —Å–∞–π—Ç–∞: {domain}\n"
                        if isinstance(result, list):
                            for idx, item in enumerate(result, 1):
                                if not isinstance(item, dict):
                                    print(result)
                                    continue
                                msg += f"\nüß© CMS #{idx}\n"
                                msg += f"üìò CMS: {item.get('cms')}\n"
                                msg += f"üî¢ –í–µ—Ä—Å–∏—è: {item.get('version') or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n"
                                match item.get("vulnerable"):
                                    case True:
                                        msg += "üö® –£—è–∑–≤–∏–º–æ—Å—Ç—å: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\n"
                                    case False:
                                        msg += "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\n"
                                    case _:
                                        msg += "‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç—å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
                                if "details" in item:
                                    msg += f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {item['details']}\n"
                        else:
                            msg += f"üìò CMS: {result.get('cms')}\n"
                            msg += f"üî¢ –í–µ—Ä—Å–∏—è: {result.get('version') or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n"
                            match result.get("vulnerable"):
                                case True:
                                    msg += "üö® –£—è–∑–≤–∏–º–æ—Å—Ç—å: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\n"
                                case False:
                                    msg += "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\n"
                                case _:
                                    msg += "‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç—å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
                            if "details" in result:
                                msg += f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {result['details']}\n"
                        send_telegram_message(tg_token, tg_chat, msg)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
                return
            except Exception as e:
                print(f"–æ—à–∏–±–∫–∞: {proxies['http']}: {e}")

    print("‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ä–∞–±–æ—á–∏–µ.")
